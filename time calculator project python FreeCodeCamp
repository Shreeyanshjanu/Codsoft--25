def add_time(start, duration, starting_day=None):
    # Days of the week in order
    days_of_week = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
    
    # Split the start time
    start_time, meridian = start.split()
    start_hours, start_minutes = map(int, start_time.split(':'))
    
    # Convert start time to 24-hour format
    if meridian == 'PM':
        start_hours += 12 if start_hours != 12 else 0
    elif start_hours == 12:  # 12:00 AM is midnight
        start_hours = 0
    
    # Parse duration
    duration_hours, duration_minutes = map(int, duration.split(':'))
    
    # Add duration to start time
    total_minutes = start_minutes + duration_minutes
    extra_hours = total_minutes // 60
    final_minutes = total_minutes % 60
    total_hours = start_hours + duration_hours + extra_hours
    
    # Calculate days passed
    days_passed = total_hours // 24
    final_hours = total_hours % 24
    
    # Convert back to 12-hour format
    final_meridian = 'AM' if final_hours < 12 else 'PM'
    final_hours = final_hours if final_hours % 12 != 0 else 12
    final_hours = final_hours % 12 if final_hours > 12 else final_hours
    
    # Determine the day of the week
    if starting_day:
        starting_day_index = days_of_week.index(starting_day.capitalize())
        result_day_index = (starting_day_index + days_passed) % 7
        result_day = days_of_week[result_day_index]
    else:
        result_day = None
    
    # Build the result string
    new_time = f"{final_hours}:{final_minutes:02d} {final_meridian}"
    if result_day:
        new_time += f", {result_day}"
    
    if days_passed == 1:
        new_time += " (next day)"
    elif days_passed > 1:
        new_time += f" ({days_passed} days later)"
    
    return new_time
